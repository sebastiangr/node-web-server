# version: '3.8'

services:  
  # PostgreSQL Database Service
  postgres_db:
    image: postgres:15-alpine # Usa la imagen oficial de PostgreSQL versión 15, variante Alpine (más ligera)
    container_name: web_server_db # Nombre personalizado para el contenedor
    environment: # Variables de entorno para configurar el contenedor de PostgreSQL
      POSTGRES_USER: ${POSTGRES_USER:-myvideouser} # Nombre de usuario para la DB
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-mysecretpassword} # Contraseña para el usuario
      POSTGRES_DB: ${POSTGRES_DB:-videostreamerdb} # Nombre de la base de datos a crear
      # PGDATA: /var/lib/postgresql/data/pgdata # Opcional, si quieres cambiar la ruta de datos interna
    volumes: # Define cómo se maneja el almacenamiento persistente y otros archivos
      # Montaje de volumen para persistir los datos de PostgreSQL:
      # - Lado izquierdo (./database_data): Ruta en tu máquina host (Ubuntu)
      # - Lado derecho (/var/lib/postgresql/data): Ruta DENTRO del contenedor donde PostgreSQL guarda sus datos
      - ./database_data:/var/lib/postgresql/data
      # Montaje del script de inicialización:
      # - Lado izquierdo (./scripts/db_init.sql): Tu script SQL en el host
      # - Lado derecho (/docker-entrypoint-initdb.d/init.sql): Donde PostgreSQL lo buscará para ejecutarlo
      - ./scripts/db_init.sql:/docker-entrypoint-initdb.d/init.sql
    ports: # Mapeo de puertos entre el host y el contenedor
      # - Lado izquierdo ("5432"): Puerto en tu máquina host (Ubuntu)
      # - Lado derecho ("5432"): Puerto DENTRO del contenedor donde PostgreSQL escucha
      # Esto permite que aplicaciones en tu host (como tu backend corriendo localmente)
      # se conecten a la base de datos del contenedor a través de localhost:5432
      - "5432:5432"
    restart: unless-stopped # Política de reinicio: el contenedor se reiniciará a menos que lo detengas explícitamente
    healthcheck: # (Opcional pero recomendado) Define cómo Docker verifica si el servicio está saludable
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-myvideouser} -d ${POSTGRES_DB:-videostreamerdb}"]
      interval: 10s # Con qué frecuencia ejecutar la prueba
      timeout: 5s   # Cuánto tiempo esperar por una respuesta
      retries: 5    # Cuántas veces reintentar si falla

  # Node.js Backend Service
  backend:
    build: # Instrucciones para construir la imagen del backend
      context: ./backend # Directorio donde se encuentra el Dockerfile del backend
      dockerfile: Dockerfile # Nombre del Dockerfile (puede omitirse si es 'Dockerfile')
    container_name: web_server_backend # Nombre personalizado para el contenedor del backend
    ports: # Mapeo de puertos: <puerto_host>:<puerto_contenedor>
      # Expone el puerto 3001 del contenedor al puerto 3001 del host
      - "${BACKEND_HOST_PORT:-3001}:3001" 
    volumes: # Montaje de volúmenes
      # Monta tu carpeta de vídeos del host a la ruta DENTRO del contenedor
      # que el backend espera (según VIDEO_DIRECTORY_PATH).
      # ':ro' significa read-only, el contenedor no podrá modificar los vídeos originales.
      - ./videos_to_serve:/app/videos_mounted:ro
      # Para desarrollo: Monta el código fuente local en el contenedor.
      # Esto permite que los cambios en tu código se reflejen sin reconstruir la imagen.
      # PERO, ten cuidado con node_modules, es mejor excluirlo o manejarlo bien.
      - ./backend:/app
      - ./backend/src:/app/src 
      - ./backend/package.json:/app/package.json # Si haces cambios frecuentes a deps
      - ./backend/tsconfig.json:/app/tsconfig.json # TS-node
      # - ./backend/package-lock.json:/app/package-lock.json
      # Para evitar que los node_modules del host sobreescriban los del contenedor:
      - /app/node_modules # Define un volumen anónimo para node_modules DENTRO del contenedor
    depends_on: # Define dependencias entre servicios
      postgres_db: # El backend depende de la base de datos
        condition: service_healthy # Espera a que postgres_db esté 'healthy' (según su healthcheck)
                                   # antes de iniciar el backend.
    environment: # Variables de entorno para el servicio backend
      NODE_ENV: development # o production (afecta cómo algunas librerías se comportan)
      BACKEND_PORT: 3001 # Puerto en el que Node.js escuchará DENTRO del contenedor (debe coincidir con EXPOSE)
      # Conexión a la base de datos DENTRO de la red Docker:
      # Usamos el nombre del servicio 'postgres_db' como el host de la base de datos.
      DATABASE_URL: postgresql://${POSTGRES_USER:-myvideouser}:${POSTGRES_PASSWORD:-mysecretpassword}@postgres_db:5432/${POSTGRES_DB:-videostreamerdb}
      VIDEO_DIRECTORY_PATH: /app/videos_mounted # Ruta DENTRO del contenedor donde están los vídeos
      # (Opcional) Host para que escuche en todas las interfaces dentro del contenedor
      HOST: '0.0.0.0'
      TMDB_API_KEY: ${TMDB_API_KEY_DOCKER} # Define tu clave de API de TMDB aquí 
    restart: unless-stopped
    # (Opcional) Para desarrollo con hot-reloading dentro del contenedor:
    # Si montas tu código fuente con un volumen (como arriba con ./backend/src:/app/src),
    # puedes usar el comando de desarrollo de nodemon.
    # El Dockerfile por defecto usa `CMD ["node", "dist/server.js"]` (para producción).
    # Puedes sobreescribir el CMD aquí para desarrollo:
    command: npm run dev

  # Frontend Service (SvelteKit)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      # (Opcional) Si necesitas pasar argumentos de build para VITE_API_BASE_URL
      # args:
      #   VITE_API_BASE_URL_BUILD_ARG: ${VITE_API_BASE_URL_FRONTEND_BUILD} # Definir esta var en .env raíz
    container_name: web_server_frontend
    ports:
      # Mapea el puerto 3000 del contenedor al puerto FRONTEND_HOST_PORT (e.g., 80 o 3000) del host
      - "${FRONTEND_HOST_PORT:-3000}:5173"
    volumes: # Para desarrollo con hot-reloading de SvelteKit
      - ./frontend:/app # Monta todo el directorio del frontend
      - ./frontend/src:/app/src
      - ./frontend/static:/app/static
      - ./frontend/svelte.config.js:/app/svelte.config.js
      - ./frontend/vite.config.ts:/app/vite.config.ts
      - ./frontend/tsconfig.json:/app/tsconfig.json
      - ./frontend/package.json:/app/package.json # Si cambias dependencias frecuentemente
      # - ./frontend/package-lock.json:/app/package-lock.json
      # Para preservar node_modules y .svelte-kit del contenedor:
      - /app/node_modules
      - /app/.svelte-kit 
    depends_on: # El frontend (si hace llamadas directas al backend en el build o necesita que esté listo)
      - backend   # No es una dependencia estricta en runtime si las llamadas son desde el navegador del cliente,
                  # pero es bueno para el orden de inicio.
    environment:
      # NODE_ENV: ${NODE_ENV:-production} # SvelteKit adapter-node usa esto
      NODE_ENV: development
      # PORT: 5173 # Puerto que el servidor SvelteKit escuchará DENTRO del contenedor (debe coincidir con EXPOSE)
      HOST: '0.0.0.0' # Para que el servidor SvelteKit escuche en todas las interfaces dentro del contenedor
      # (Opcional) Si necesitas configurar VITE_API_BASE_URL en runtime (más complejo)
      # VITE_API_BASE_URL: ${VITE_API_BASE_URL_FRONTEND_RUNTIME} # Definir esta var en .env raíz
    restart: unless-stopped
    # (Opcional) Para desarrollo con hot-reloading de SvelteKit dentro del contenedor:
    # Este comando ejecuta el servidor de desarrollo de Vite, que es diferente al build de producción.
    command: npm run dev -- --host --port 5173
    # command: sh -c "ls -la /app/node_modules/.bin && npm run dev"